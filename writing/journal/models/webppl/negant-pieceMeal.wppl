var lowerBins = [
	0,
  0.01,
  0.1,
  0.2,
  0.3,
  0.4,
  0.5,
  0.6,
  0.7,
  0.8,
  0.9,
  0.99
];

var upperBins = [
  0.01,
  0.1,
  0.2,
  0.3,
  0.4,
  0.5,
  0.6,
  0.7,
  0.8,
  0.9,
  0.99,
  1
];

var lowerBinsFine = [
	0,
  0.01,
  0.05,
  0.1,
  0.15,
  0.2,
  0.25,
  0.3,
  0.35,
  0.4,
  0.45,
  0.5,
  0.55,
  0.6,
  0.65,
  0.7,
  0.75,
  0.8,
  0.85,
  0.9,
  0.95,
  0.99
];

var upperBinsFine = [
  0.01,
  0.05,
  0.1,
  0.15,
  0.2,
  0.25,
  0.3,
  0.35,
  0.4,
  0.45,
  0.5,
  0.55,
  0.6,
  0.65,
  0.7,
  0.75,
  0.8,
  0.85,
  0.9,
  0.95,
  0.99,
  1
];

var round = function(x){
  return Math.round(x*100)/100
}

var isNot = function(u){
  return u == "not"
}

var isUn = function(u){
  return u == "un"
}

var hasNegModifier = function(utt){
  return (utt.split("_")[0] == "not")
};
var hasNegMorph = function(utt){
  return (utt.indexOf("un") > -1)
};
var roundTo3 = function(x){
  return Math.round(x * 1000) / 1000
}

var midBins = map2(function(b1,b2){
  return roundTo3((b2 - b1)/2 + b1)
}, lowerBins, upperBins)

var thetaBins = map2(function(b1, b2){
  return roundTo3((b2-b1)/2 + b1);
}, midBins.slice(0, midBins.length-1), midBins.slice(1))

var avoidEnds = function(x){
  return x >= 1 ? 0.99 : x == 0 ? 0.01 : x
}

var lb = 0, ub = 1, diff = 0.05;
var bins = _.range(lb, ub + diff, diff)

var DiscreteGaussian = function(mu, sigma){
  Infer({model: function(){
    categorical({
      vs:midBins,
      ps:map(function(x){Math.exp(Gaussian({mu, sigma}).score(x))}, midBins)
    })
  }})
}

var DiscreteBeta = cache(function(a, b){
  Infer({model: function(){
    categorical({
      vs:midBins,
      ps:map(function(x){
        Math.exp(Beta({a, b}).score(x))
      }, midBins)
    })
  }})
})



var bonafideAntonymsLexicon = function(words, state, thresholds, l){
  words == "happy" ? state > thresholds.happy :
  words == "not_happy" ? !(state > thresholds.happy) :
  words == "un_happy" ? state < thresholds.unhappy :
  words == "not_un_happy" ? !(state < thresholds.unhappy) :
  true
};

var georgeOrwellLexicon = function(words, state, thresholds, l){
  words == "happy" ? state > thresholds.happy :
  words == "not_happy" ? !(state > thresholds.happy) :
  words == "un_happy" ? !(state > thresholds.happy) :
  words == "not_un_happy" ? !!(state > thresholds.happy) :
  true
};

var vanillaRSALexicon = function(words, state, thresholds, l){
  words == "happy" ? state > 0.7 :
  words == "not_happy" ? !(state > 0.7) :
  words == "un_happy" ? (state < 0.3) :
  words == "not_un_happy" ? !(state < 0.3) :
	false
};


// displayObj(LexiconPrior)

var uncertainNegationLexicon = function(words, state, thresholds, lexicon){
  words == "happy" ? state > thresholds.happy :
  words == "not_happy" ?  lexicon.contradictory_not ? !(state > thresholds.happy) :
      (state < thresholds.not_happy) :
  words == "un_happy" ? lexicon.contradictory_un ? !(state > thresholds.happy) :
      (state < thresholds.unhappy) :
  words == "not_un_happy" ?  lexicon.contradictory_un ? (state > thresholds.happy) : !(state < thresholds.unhappy) :
  true
};

var modelLexicon = {
	vanillaRSA: vanillaRSALexicon,
	georgeOrwell: georgeOrwellLexicon,
	bonafideAntonyms: bonafideAntonymsLexicon,
	uncertainNegation: uncertainNegationLexicon
}

var utteranceCost = function(u, cost_neg, multiplicative_cost) {
  var c0 = multiplicative_cost ? 1 : 0;
  var null_cost_incr = multiplicative_cost ? 1 : 0
  var splitUtt = u.split("_")

  var c1 = ( isNot(splitUtt[0]) || isUn(splitUtt[0]) ) ? cost_neg : null_cost_incr
  var c2 = ( isNot(splitUtt[1]) || isUn(splitUtt[1]) ) ? cost_neg : null_cost_incr

  var full_Cost = multiplicative_cost ?  c0 * c1 * c2 : c0 + c1 + c2
  return full_Cost

}

var possibleLexica = [
	{contradictory_not: true, contradictory_un: true}, // george orwell
	{contradictory_not: true, contradictory_un: false}, // bonafide antonyms
]

var LexiconPrior = Categorical({vs: possibleLexica, ps: [0.5, 0.5]})

//
// {
// 	georgeOrwell: Categorical({vs: possibleLexica, ps: [1, 0]}),
// 	bonafideAntonyms: Categorical({vs: possibleLexica, ps: [0, 1]}),
// 	uncertainNegation: Categorical({vs: possibleLexica, ps: [0.5, 0.5]})
// }

var alternatives =  ["happy", "un_happy", "not_happy", "not_un_happy"]

var cost_sets = {
  false: [0, 1, 2, 3],  // additive costs
  true: [1, 1.125, 1.25, 1.5, 2] // multiplicative costs
}

var listener0 = cache(function(utterance, thresholds, StatePrior, lexicon, modelName) {
  Infer({model: function(){
    var state = sample(StatePrior);
		var meaningFn = modelLexicon[modelName]
    var m = meaningFn(utterance, state, thresholds, lexicon);
    condition(m);
    return state;
  }})
}, 10000);

var speaker1 = cache(function(state, thresholds, opts, StatePrior, lexicon, modelName) {
  Infer({model: function(){
    var utterance = uniformDraw(alternatives);
    // display(utterance)
    var cost = utteranceCost(utterance, opts.cost_neg, opts.multiplicative_cost)
    var L0 = listener0(utterance, thresholds, StatePrior, lexicon, modelName);
		// JSON.stringify(utterance + thresholds + StatePrior + lexicon +modelName)
    var utility = opts.multiplicative_cost ? L0.score(state) * cost : L0.score(state) - cost;
		// display(utility)
    factor(opts.speaker_optimality*utility);
    return utterance;
  }})
}, 10000);

var listener1 = cache(function(utterance, opts, StatePrior, modelName) {
  Infer({model: function(){
    // display(utterance)
    // display(opts.alternative_utterances)
		var lexicon = (modelName == "vanillaRSA") ? null :
		modelName == "georgeOrwell" ? {contradictory_not: true, contradictory_un: true} :
		modelName == "bonafideAntonyms" ? {contradictory_not: true, contradictory_un: false} :
		 sample(LexiconPrior)
    // display(alt_utterances)
    // display(alt_utterances.indexOf("un_happy"))
    var thresholds = {
      happy: modelName == "vanillaRSA" ? null : uniformDraw(thetaBins),
      unhappy: modelName == "vanillaRSA"  ? "contradiction" :
								lexicon.contradictory_un ? "contradiction" :
								uniformDraw(thetaBins)
    }
		// display(JSON.stringify(thresholds))
    var state = sample(StatePrior);
		// display()
    var S1 = speaker1(state, thresholds, opts, StatePrior, lexicon, modelName)
    observe(S1, utterance)
    return state
  }})
}, 10000);

var both_state_priors = {
  uniform: DiscreteBeta(1, 1),
  "u_shaped": DiscreteBeta(0.5, 0.5),
  gaussian: DiscreteGaussian(0.5, 0.5)
}

var prior_names = [
  "uniform",
  "gaussian",
  "u_shaped"
]

var all_models = [
	"georgeOrwell",
	"vanillaRSA",
	"bonafideAntonyms",
	"uncertainNegation"
]


_.flatten(_.flatten(_.flatten(_.flatten(
	map(function(modelName){
		display(JSON.stringify(modelName))

		map(function(prior_name){
	    var statePrior = both_state_priors[prior_name]
	    map(function(opts){
	      display(JSON.stringify(opts))
	      var all_utterances = alternatives
	      var cost_levels = cost_sets[opts.multiplicative_cost]

	      map(function(c){

	        map(function(u){
	          var listener_opts = extend(opts, {cost_neg: c} )
	          var post = listener1(u, listener_opts, statePrior, modelName)
	          map(function(s){
	            return extend(opts, {
								modelName: modelName,
								prior: prior_name,
								utterance: u,
								state: s,
								cost_neg: c,
								posterior_prob: Math.exp(post.score(s)),
							})
	          }, sort(statePrior.support()))

	        }, all_utterances)

	      }, cost_levels)

	    }, all_opts)
	  }, prior_names)
	}, all_models)
))))

// listener0(0.75,)
