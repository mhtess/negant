// helpers
var hasNegModifier = function(utt){
  return (utt.split("_")[0] == "not")
};
var hasNegMorph = function(utt){
  return (utt.indexOf("un") > -1)
};
var round = function(x){
  return Math.round(x * 100) / 100
}
var marginalize = function(dist, key){
  return Infer({model: function(){ sample(dist)[key] }})
}
var roundTo3 = function(x){
  return Math.round(x * 1000) / 1000
}

var displayObj =  function(x){display(JSON.stringify(x))};

var lowerBins = [
	0,
  0.01,
  0.05,
  0.1,
  0.15,
  0.2,
  0.25,
  0.3,
  0.35,
  0.4,
  0.45,
  0.5,
  0.55,
  0.6,
  0.65,
  0.7,
  0.75,
  0.8,
  0.85,
  0.9,
  0.95,
  0.99
];

var upperBins = [
  0.01,
  0.05,
  0.1,
  0.15,
  0.2,
  0.25,
  0.3,
  0.35,
  0.4,
  0.45,
  0.5,
  0.55,
  0.6,
  0.65,
  0.7,
  0.75,
  0.8,
  0.85,
  0.9,
  0.95,
  0.99,
  1
];

var midBins = map2(function(b1,b2){
  return roundTo3((b2 - b1)/2 + b1)
}, lowerBins, upperBins)

var thetaBins = map2(function(b1, b2){
  return roundTo3((b2-b1)/2 + b1);
}, midBins.slice(0, midBins.length-1), midBins.slice(1))

/////////////////////////////////////////////////////////

var utterances = [
  "happy",
  "not_unhappy",
  "not_happy",
  "unhappy",
  // "neither_nor"
];

var cost_yes = 0;
var cost_not = 3;
var cost_un = 3;

var speakerOptimality = 1;
var speakerOptimality2 = 1;

var uttCosts = map(function(u) {
  var notCost = hasNegModifier(u) ? cost_not : 0
  var unCost = hasNegMorph(u) ? cost_un : 0
  var totalCost = notCost + unCost
  return Math.exp(-totalCost)
}, utterances)

var utterancePrior = Infer({model: function(){
  return utterances[discrete(uttCosts)]
}});

// single threshold
// var meaning = function(words, state, threshold){
//   words == "happy" ? state > threshold :
//   words == "not_unhappy" ? state > threshold :
//   words == "not_happy" ? !(state > threshold) :
//   words == "unhappy" ? !(state > threshold) :
//   true
// };

var meaning = function(words, state, thresholds){
  return words == "happy" ? state > thresholds.happy :
  words == "not_happy" ? !(state > thresholds.happy) :
  words == "unhappy" ? state < thresholds.unhappy :
  words == "not_unhappy" ? !(state < thresholds.unhappy) :
  words == "neither_nor" ? (
    !(state > thresholds.happy) &&
    !(state < thresholds.unhappy)
  ) :
  true
};

var lb = 0, ub = 1, diff = 0.05;
// var bins = [0.01].concat(_.range(lb, ub + diff, diff)
// display(bins)
// var bins = [0.01].concat(_.range(diff,1, diff)).concat([0.99])
var bins = _.range(lb, ub + diff, diff);

var DiscreteGaussian = function(mu, sigma){
  Infer({model: function(){
    categorical({
      vs:midBins,
      ps:map(function(x){Math.exp(Gaussian({mu, sigma}).score(x))}, bins)
    })
  }})
}

var DiscreteBeta = cache(function(a, b){
  Infer({model: function(){
    categorical({
      vs:midBins,
      ps:map(function(x){
        // var xi = x >= 1 ? 0.99 : x == 0 ? 0.01 : x
        Math.exp(Beta({a, b}).score(x))
      }, midBins)
    })
  }})
})

// var lowerThetaPrior =

var UnitUniformPrior = Infer({model: function(){
  return uniformDraw(bins)
}})

var listener0 = cache(function(utterance, thresholds) {
  Infer({model: function(){
    var state = sample(DiscreteBeta(1, 1));
    // console.log(utterance + " "+ state  + " " + meaning(utterance, state, thresholds))
    // var state = sample(DiscreteGaussian(0, 0.5));
    var m = meaning(utterance, state, thresholds);
    condition(m);
    return state;
  }})
}, 10000);

var speaker1 = cache(function(state, thresholds) {
  Infer({model: function(){
    var utterance = sample(utterancePrior);
    var L0 = listener0(utterance, thresholds);
    // console.log(utterance + " "+  state  + " " + L0.score(state))
    factor(speakerOptimality*L0.score(state));
    return utterance;
  }})
}, 10000);

var listener1 = cache(function(utterance) {
  Infer({model: function(){
    var happy_threshold = uniformDraw(thetaBins)
    var has_an_unhappy_threshold = flip(0.2)
    var unhappy_threshold = has_an_unhappy_threshold ?
      uniformDraw(thetaBins) :
      happy_threshold

    var thresholds = {
      happy: happy_threshold,
      unhappy: unhappy_threshold
    }

    var state = sample(DiscreteBeta(1, 1));
    // var state = sample(DiscreteGaussian(0, 0.5));

    var S1 = speaker1(state, thresholds)
    observe(S1, utterance)
    return {state, has_an_unhappy_threshold}
  }})
}, 10000);

var posteriors = map(function(u){
  return [u, listener1(u)]
  // display(u + " = " + expectation(post, function(x){x.state}))
  //   viz(post)
}, utterances)

map(function(post){
  display(post[0] + " = " + expectation(post[1], function(x){x.state}))
}, posteriors)

map(function(post){
  display(post[0] + " --- " + expectation(post[1], function(x){x.has_an_unhappy_threshold}))
}, posteriors)
